# Kubernetes ServiceAccount 配置
# 为鉴宝后端服务创建专用的服务账户和RBAC权限

apiVersion: v1
kind: ServiceAccount
metadata:
  name: jianbao-backend
  namespace: jianbao-system
  labels:
    app: jianbao-backend
    component: serviceaccount
  annotations:
    description: "鉴宝后端服务专用ServiceAccount"
automountServiceAccountToken: true

---
# ClusterRole - 定义集群级别权限
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: jianbao-backend-cluster-role
  labels:
    app: jianbao-backend
    component: rbac
rules:
# 基本资源读取权限
- apiGroups: [""]
  resources: ["nodes", "nodes/status"]
  verbs: ["get", "list"]
  
# 服务发现权限
- apiGroups: [""]
  resources: ["services", "endpoints"]
  verbs: ["get", "list", "watch"]
  
# ConfigMap读取权限（用于动态配置）
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list", "watch"]
  
# Metrics权限（Prometheus监控）
- apiGroups: ["metrics.k8s.io"]
  resources: ["pods", "nodes"]
  verbs: ["get", "list"]

---
# Role - 命名空间级别权限
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: jianbao-backend-role
  namespace: jianbao-system
  labels:
    app: jianbao-backend
    component: rbac
rules:
# Pod管理权限（用于健康检查、日志收集等）
- apiGroups: [""]
  resources: ["pods", "pods/log", "pods/status"]
  verbs: ["get", "list", "watch"]
  
# Secret读取权限（仅限自己的secrets）
- apiGroups: [""]
  resources: ["secrets"]
  resourceNames: ["jianbao-secrets", "jianbao-backend-token"]
  verbs: ["get"]
  
# ConfigMap管理权限
- apiGroups: [""]
  resources: ["configmaps"]
  resourceNames: ["jianbao-backend-config"]
  verbs: ["get", "watch"]
  
# 服务账户令牌管理
- apiGroups: [""]
  resources: ["serviceaccounts/token"]
  resourceNames: ["jianbao-backend"]
  verbs: ["create"]
  
# Event记录权限
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create", "patch"]

---
# ClusterRoleBinding - 绑定集群角色
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: jianbao-backend-cluster-binding
  labels:
    app: jianbao-backend
    component: rbac
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: jianbao-backend-cluster-role
subjects:
- kind: ServiceAccount
  name: jianbao-backend
  namespace: jianbao-system

---
# RoleBinding - 绑定命名空间角色
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: jianbao-backend-binding
  namespace: jianbao-system
  labels:
    app: jianbao-backend
    component: rbac
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: jianbao-backend-role
subjects:
- kind: ServiceAccount
  name: jianbao-backend
  namespace: jianbao-system

---
# NetworkPolicy - 网络安全策略
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: jianbao-backend-netpol
  namespace: jianbao-system
  labels:
    app: jianbao-backend
    component: security
spec:
  podSelector:
    matchLabels:
      app: jianbao-backend
  policyTypes:
  - Ingress
  - Egress
  
  # 入站流量规则
  ingress:
  # 允许来自同命名空间的流量
  - from:
    - namespaceSelector:
        matchLabels:
          name: jianbao-system
    ports:
    - protocol: TCP
      port: 8000
      
  # 允许来自Ingress Controller的流量
  - from:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    - podSelector:
        matchLabels:
          app: nginx-ingress
    ports:
    - protocol: TCP
      port: 8000
      
  # 允许来自ArgoCD的健康检查
  - from:
    - namespaceSelector:
        matchLabels:
          name: argocd
    ports:
    - protocol: TCP
      port: 8000
      
  # 出站流量规则
  egress:
  # 允许DNS解析
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    - podSelector:
        matchLabels:
          k8s-app: kube-dns
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
      
  # 允许访问数据库（MySQL）
  - to: []
    ports:
    - protocol: TCP
      port: 3306
      
  # 允许访问Redis
  - to: []
    ports:
    - protocol: TCP
      port: 6379
      
  # 允许HTTPS出站（腾讯云COS、微信API等）
  - to: []
    ports:
    - protocol: TCP
      port: 443
      
  # 允许HTTP出站（内部API调用）
  - to: []
    ports:
    - protocol: TCP
      port: 80

---
# PodSecurityPolicy - Pod安全策略（如果集群启用了PSP）
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: jianbao-backend-psp
  labels:
    app: jianbao-backend
    component: security
spec:
  # 特权相关
  privileged: false
  allowPrivilegeEscalation: false
  
  # 用户和组
  runAsUser:
    rule: 'MustRunAs'
    ranges:
    - min: 1000
      max: 1000
  runAsGroup:
    rule: 'MustRunAs'
    ranges:
    - min: 1000
      max: 1000
  
  # 文件系统
  fsGroup:
    rule: 'MustRunAs'
    ranges:
    - min: 1000
      max: 1000
  readOnlyRootFilesystem: false
  
  # 网络
  hostNetwork: false
  hostIPC: false
  hostPID: false
  
  # 端口
  hostPorts:
  - min: 8000
    max: 8000
    
  # 卷类型
  volumes:
  - 'configMap'
  - 'emptyDir'
  - 'projected'
  - 'secret'
  - 'downwardAPI'
  - 'persistentVolumeClaim'
  
  # 能力控制
  allowedCapabilities: []
  defaultAddCapabilities: []
  requiredDropCapabilities:
  - ALL
  
  # SELinux
  seLinux:
    rule: 'RunAsAny'
    
  # AppArmor
  allowedProcMountTypes:
  - Default
  
  # Seccomp
  allowedUnsafeSysctls: []
  forbiddenSysctls:
  - '*'

---
# ClusterRole for PSP
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: jianbao-backend-psp-role
  labels:
    app: jianbao-backend
    component: security
rules:
- apiGroups:
  - policy
  resources:
  - podsecuritypolicies
  resourceNames:
  - jianbao-backend-psp
  verbs:
  - use

---
# ClusterRoleBinding for PSP
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: jianbao-backend-psp-binding
  labels:
    app: jianbao-backend
    component: security
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: jianbao-backend-psp-role
subjects:
- kind: ServiceAccount
  name: jianbao-backend
  namespace: jianbao-system